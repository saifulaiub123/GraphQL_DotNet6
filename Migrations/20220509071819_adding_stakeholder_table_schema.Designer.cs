// <auto-generated />
using System;
using GraphQl_HotChochlete.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GraphQl_HotChochlete.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220509071819_adding_stakeholder_table_schema")]
    partial class adding_stakeholder_table_schema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GraphQl_HotChochlete.Models.BusinessCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("StakeholderInfoId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StakeholderInfoId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("BusinessCard ", (string)null);
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("DistrictBngName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WebUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("District", (string)null);
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.EducationalInstitute", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EducationalInstitute", (string)null);
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Designation = "Software Engineer",
                            Name = "Saiful"
                        },
                        new
                        {
                            Id = 2,
                            Designation = "Jr. Software Engineer",
                            Name = "Akhter"
                        },
                        new
                        {
                            Id = 3,
                            Designation = "System Developer",
                            Name = "Eathen"
                        },
                        new
                        {
                            Id = 4,
                            Designation = "UX Engineer",
                            Name = "Razy"
                        });
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Organization", (string)null);
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.StakeholderEducationalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Batch")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("EducationalInstituteId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("StakeholderInfoId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EducationalInstituteId");

                    b.HasIndex("StakeholderInfoId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("StakeholderEducationalHistory", (string)null);
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.StakeholderInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Batch")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BusinessCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommunicationBy")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OtherInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("OverallRelationType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PoliticalInfluence")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PoliticalInterest")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("StakeholderInfo", (string)null);
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.StakeholderPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EngagementCategory")
                        .HasColumnType("int");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("OfficeNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OtherIndustryCategory")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StakeholderCategory")
                        .HasColumnType("int");

                    b.Property<string>("StakeholderInfoId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("TitleId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DistrictId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StakeholderInfoId");

                    b.HasIndex("TitleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("StakeholderPosition", (string)null);
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.StakeholderVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdvocacyTool")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ContactMethodOthers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<int>("EngagementCategory")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("KeyOutcomes")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("NextSteps")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("NoOfGifts")
                        .HasColumnType("int");

                    b.Property<int>("OtherIndustryCategory")
                        .HasColumnType("int");

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StakeholderCategory")
                        .HasColumnType("int");

                    b.Property<string>("StakeholderInfoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("VisitedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("VisitedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VisitedLocation")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StakeholderInfoId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VisitedBy");

                    b.ToTable("StakeholderVisit", (string)null);
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.Title", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Title", (string)null);
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Function")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("UserInfo", (string)null);
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.BusinessCard", b =>
                {
                    b.HasOne("GraphQl_HotChochlete.Models.UserInfo", "CreatedUserInfo")
                        .WithMany("CreateBusinessCards")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_businessCard_userInfo_createdBy");

                    b.HasOne("GraphQl_HotChochlete.Models.StakeholderInfo", "StakeholderInfo")
                        .WithMany("BusinessCards")
                        .HasForeignKey("StakeholderInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphQl_HotChochlete.Models.UserInfo", "UpdatedUserInfo")
                        .WithMany("UpdatedBusinessCards")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_businessCard_userInfo_updatedBy");

                    b.Navigation("CreatedUserInfo");

                    b.Navigation("StakeholderInfo");

                    b.Navigation("UpdatedUserInfo");
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.EducationalInstitute", b =>
                {
                    b.HasOne("GraphQl_HotChochlete.Models.UserInfo", "CreatedUserInfo")
                        .WithMany("CreatedEducationalInstitute")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphQl_HotChochlete.Models.UserInfo", "UpdatedUserInfo")
                        .WithMany("UpdatedEducationalInstitute")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedUserInfo");

                    b.Navigation("UpdatedUserInfo");
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.Organization", b =>
                {
                    b.HasOne("GraphQl_HotChochlete.Models.UserInfo", "CreatedUserInfo")
                        .WithMany("CreatedOrganization")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphQl_HotChochlete.Models.UserInfo", "UpdatedUserInfo")
                        .WithMany("UpdatedOrganization")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedUserInfo");

                    b.Navigation("UpdatedUserInfo");
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.StakeholderEducationalHistory", b =>
                {
                    b.HasOne("GraphQl_HotChochlete.Models.UserInfo", "CreatedUserInfo")
                        .WithMany("CreatedStakeholderEducationalHistory")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GraphQl_HotChochlete.Models.EducationalInstitute", "EducationalInstitute")
                        .WithMany("StakeholderEducationalHistory")
                        .HasForeignKey("EducationalInstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphQl_HotChochlete.Models.StakeholderInfo", "StakeholderInfo")
                        .WithMany("StakeholderEducationalHistory")
                        .HasForeignKey("StakeholderInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphQl_HotChochlete.Models.UserInfo", "UpdatedUserInfo")
                        .WithMany("UpdatedStakeholderEducationalHistory")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedUserInfo");

                    b.Navigation("EducationalInstitute");

                    b.Navigation("StakeholderInfo");

                    b.Navigation("UpdatedUserInfo");
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.StakeholderInfo", b =>
                {
                    b.HasOne("GraphQl_HotChochlete.Models.UserInfo", "CreatedUserInfo")
                        .WithMany("CreatedStakeholderInfo")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GraphQl_HotChochlete.Models.UserInfo", "UpdatedUserInfo")
                        .WithMany("UpdatedStakeholderInfo")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedUserInfo");

                    b.Navigation("UpdatedUserInfo");
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.StakeholderPosition", b =>
                {
                    b.HasOne("GraphQl_HotChochlete.Models.UserInfo", "CreatedUserInfo")
                        .WithMany("CreatedStakeholderPosition")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GraphQl_HotChochlete.Models.District", "District")
                        .WithMany("StakeholderPosition")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphQl_HotChochlete.Models.Organization", "Organization")
                        .WithMany("StakeholderPosition")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphQl_HotChochlete.Models.StakeholderInfo", "StakeholderInfo")
                        .WithMany("StakeholderPosition")
                        .HasForeignKey("StakeholderInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphQl_HotChochlete.Models.Title", "Title")
                        .WithMany("StakeholderPosition")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphQl_HotChochlete.Models.UserInfo", "UpdatedUserInfo")
                        .WithMany("UpdatedStakeholderPosition")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedUserInfo");

                    b.Navigation("District");

                    b.Navigation("Organization");

                    b.Navigation("StakeholderInfo");

                    b.Navigation("Title");

                    b.Navigation("UpdatedUserInfo");
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.StakeholderVisit", b =>
                {
                    b.HasOne("GraphQl_HotChochlete.Models.UserInfo", "CreatedUserInfo")
                        .WithMany("CreatedStakeholderVisit")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GraphQl_HotChochlete.Models.StakeholderInfo", "StakeholderInfo")
                        .WithMany("StakeholderVisits")
                        .HasForeignKey("StakeholderInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphQl_HotChochlete.Models.UserInfo", "UpdatedUserInfo")
                        .WithMany("UpdatedStakeholderVisit")
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("GraphQl_HotChochlete.Models.UserInfo", "VisitedByUserInfo")
                        .WithMany("VisitedByStakeholderVisit")
                        .HasForeignKey("VisitedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedUserInfo");

                    b.Navigation("StakeholderInfo");

                    b.Navigation("UpdatedUserInfo");

                    b.Navigation("VisitedByUserInfo");
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.Title", b =>
                {
                    b.HasOne("GraphQl_HotChochlete.Models.UserInfo", "CreatedUserInfo")
                        .WithMany("CreatedTitle")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GraphQl_HotChochlete.Models.UserInfo", "UpdatedUserInfo")
                        .WithMany("UpdatedCreatedTitle")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedUserInfo");

                    b.Navigation("UpdatedUserInfo");
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.District", b =>
                {
                    b.Navigation("StakeholderPosition");
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.EducationalInstitute", b =>
                {
                    b.Navigation("StakeholderEducationalHistory");
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.Organization", b =>
                {
                    b.Navigation("StakeholderPosition");
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.StakeholderInfo", b =>
                {
                    b.Navigation("BusinessCards");

                    b.Navigation("StakeholderEducationalHistory");

                    b.Navigation("StakeholderPosition");

                    b.Navigation("StakeholderVisits");
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.Title", b =>
                {
                    b.Navigation("StakeholderPosition");
                });

            modelBuilder.Entity("GraphQl_HotChochlete.Models.UserInfo", b =>
                {
                    b.Navigation("CreateBusinessCards");

                    b.Navigation("CreatedEducationalInstitute");

                    b.Navigation("CreatedOrganization");

                    b.Navigation("CreatedStakeholderEducationalHistory");

                    b.Navigation("CreatedStakeholderInfo");

                    b.Navigation("CreatedStakeholderPosition");

                    b.Navigation("CreatedStakeholderVisit");

                    b.Navigation("CreatedTitle");

                    b.Navigation("UpdatedBusinessCards");

                    b.Navigation("UpdatedCreatedTitle");

                    b.Navigation("UpdatedEducationalInstitute");

                    b.Navigation("UpdatedOrganization");

                    b.Navigation("UpdatedStakeholderEducationalHistory");

                    b.Navigation("UpdatedStakeholderInfo");

                    b.Navigation("UpdatedStakeholderPosition");

                    b.Navigation("UpdatedStakeholderVisit");

                    b.Navigation("VisitedByStakeholderVisit");
                });
#pragma warning restore 612, 618
        }
    }
}
